Fix build against 2.6.24 kernel.

* fix courtesy of Stanislav Brabec
* http://www.oesf.org/forum/index.php?showtopic=23985

Signed off by Stanislav Brabec <utx@penguin.cz>
Signed off by Andrea Adami <andrea.adami@gmail.com>

Index: survive-1.1.0/nandlogical.c
===================================================================
--- survive-1.1.0.orig/nandlogical.c	2006-06-09 19:06:48.000000000 +0400
+++ survive-1.1.0/nandlogical.c	2011-09-05 04:00:37.000000000 +0400
@@ -135,7 +135,7 @@
 	oob.start = offset;
 	ret = ioctl(fd, MEMREADOOB, &oob);
 
-	//ret = nand_read_raw(nand, oobuf, offset, nand->oobblock, nand->oobsize);
+	//ret = nand_read_raw(nand, oobuf, offset, nand->writesize, nand->oobsize);
 	if (!ret) {
     	    int log_no = nand_get_logical_no(oobbuf);
 	    if (((int)log_no >= 0) && (log_no < blocks)) {
@@ -276,20 +276,20 @@
 	}
 
 	/* Make sure device page sizes are valid */
-	if (!(meminfo.oobsize == 64 && meminfo.oobblock == 2048) &&
-	    !(meminfo.oobsize == 16 && meminfo.oobblock == 512) &&
-	    !(meminfo.oobsize == 8 && meminfo.oobblock == 256)) {
+	if (!(meminfo.oobsize == 64 && meminfo.writesize == 2048) &&
+	    !(meminfo.oobsize == 16 && meminfo.writesize == 512) &&
+	    !(meminfo.oobsize == 8 && meminfo.writesize == 256)) {
 	    fprintf(stderr, "Unknown flash (not normal NAND)\n");
 	    close(fd);
 	    exit(1);
 	}
 
-	//printf("erasesize %x\noobblock %x\noobsize %x\nsize %x\n", meminfo.erasesize, meminfo.oobblock, meminfo.oobsize, meminfo.size);
+	//printf("erasesize %x\nwritesize %x\noobsize %x\nsize %x\n", meminfo.erasesize, meminfo.writesize, meminfo.oobsize, meminfo.size);
 	
 	blocks = NAND_LOGICAL_SIZE / meminfo.erasesize;
 	log2phy = (unsigned long *) malloc(blocks * sizeof(unsigned long));
 	readbuf = (char *)malloc(meminfo.erasesize);
-	oobbuf = (char *)malloc(meminfo.oobblock);	
+	oobbuf = (char *)malloc(meminfo.writesize);
 	oob.ptr = oobbuf;
 
 	scan_logical(blocks, meminfo.erasesize);
@@ -297,7 +297,7 @@
 	//printf("Start: %x\nEnd: %x\n", start_addr, length);
 	
 	end_addr = start_addr + length;
-	bs = meminfo.oobblock;
+	bs = meminfo.writesize;
 
 	for (ofs = start_addr; ofs < end_addr ; ofs+=bs) {
 	    int new_logical_added = 0;
